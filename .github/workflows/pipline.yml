name: ci_cd_pipeline

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "**/README.md"
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "**/README.md"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  security_scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install GitLeaks
        run: sudo apt install gitleaks -y

      - name: Run GitLeaks
        run: gitleaks detect --source . -r gitleaks-report.json -f json

  publish:
    runs-on: ubuntu-latest
    needs: [build, security_scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Docker image tags
        id: vars
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/ci-cd-pipelines
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Login To vps
        run: mkdir ~/.shh && echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

      - name: Add vps to known hosts
        run: ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Make deployment directory
        run: mkdir -p ~/app

      - name: Download compose file
        run: cd ~/app && curl -o compose.yml https://github.com/dilkhush9060/devops-pipelines/compose.yml

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
            cd ~/app
            docker stack deploy -c compose.yml app
          EOF
